
Basic_Mobile_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000037a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ab  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054c  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b0  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055a  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000193  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021c  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000098  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 31       	cpi	r26, 0x12	; 18
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
#include "Global.h"
#include "Sound.h"


int main()
{
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
	DDRB = 0b10101100; // PB7, PB3, PB2, PB5 : OUTPUT
  e0:	8c ea       	ldi	r24, 0xAC	; 172
  e2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00000111; // PD2, PD1, PD0 	 : OUTPUT
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0x00;       // PF0, PF1	         : Interrupt (switches)
  e8:	10 ba       	out	0x10, r1	; 16

	TCCR0A = 0b11110001; // PWM, Phase and Frequency Correct
  ea:	81 ef       	ldi	r24, 0xF1	; 241
  ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000100; // prescaler 256
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	85 bd       	out	0x25, r24	; 37
	
	

	int count = 0;

	Start();	
  f2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Start>
	
	sei();
  f6:	78 94       	sei
	TCCR0A = 0b11110001; // PWM, Phase and Frequency Correct
	TCCR0B = 0b00000100; // prescaler 256
	
	

	int count = 0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	Start();	
	
	sei();
	while(1)
	{	
		PINF = 0b00000011;
  fc:	13 e0       	ldi	r17, 0x03	; 3
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x2a>

		if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000000)) 
		{
			if (count == 0)
			{
				count++;
 100:	c1 e0       	ldi	r28, 0x01	; 1
 102:	d0 e0       	ldi	r29, 0x00	; 0
	Start();	
	
	sei();
	while(1)
	{	
		PINF = 0b00000011;
 104:	1f b9       	out	0x0f, r17	; 15

		if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000000)) 
 106:	78 9b       	sbis	0x0f, 0	; 15
 108:	1d c0       	rjmp	.+58     	; 0x144 <main+0x6a>
 10a:	79 9b       	sbis	0x0f, 1	; 15
 10c:	1b c0       	rjmp	.+54     	; 0x144 <main+0x6a>
		{
			if (count == 0)
 10e:	20 97       	sbiw	r28, 0x00	; 0
 110:	b9 f3       	breq	.-18     	; 0x100 <main+0x26>
				count++;
			}
			
			else
			{
				Backward(100);
 112:	84 e6       	ldi	r24, 0x64	; 100
 114:	0e 94 ed 00 	call	0x1da	; 0x1da <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	93 ed       	ldi	r25, 0xD3	; 211
 11c:	a0 e3       	ldi	r26, 0x30	; 48
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	a0 40       	sbci	r26, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x44>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x4e>
 128:	00 00       	nop
				_delay_ms(1000); 
	  		    Right(100);   
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Right>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	93 ed       	ldi	r25, 0xD3	; 211
 134:	a0 e3       	ldi	r26, 0x30	; 48
 136:	81 50       	subi	r24, 0x01	; 1
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	a0 40       	sbci	r26, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x5c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x66>
 140:	00 00       	nop
 142:	de cf       	rjmp	.-68     	; 0x100 <main+0x26>
				_delay_ms(1000); 
			}
		}

		else if (((~PINF & 0b00000001) == 0b00000001) && ((~PINF & 0b00000010) == 0b00000000)) 
 144:	78 99       	sbic	0x0f, 0	; 15
 146:	12 c0       	rjmp	.+36     	; 0x16c <main+0x92>
 148:	79 9b       	sbis	0x0f, 1	; 15
 14a:	10 c0       	rjmp	.+32     	; 0x16c <main+0x92>
		{ 
		 	Backward(100);
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	0e 94 ed 00 	call	0x1da	; 0x1da <Backward>
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	93 ed       	ldi	r25, 0xD3	; 211
 156:	a0 e3       	ldi	r26, 0x30	; 48
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	a0 40       	sbci	r26, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x7e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x88>
 162:	00 00       	nop
			_delay_ms(1000); 
  		    Right(100);   
 164:	84 e6       	ldi	r24, 0x64	; 100
 166:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Right>
 16a:	13 c0       	rjmp	.+38     	; 0x192 <main+0xb8>
			_delay_ms(500); 
		}  
		
		else if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000010)) 
 16c:	78 9b       	sbis	0x0f, 0	; 15
 16e:	1b c0       	rjmp	.+54     	; 0x1a6 <main+0xcc>
 170:	79 99       	sbic	0x0f, 1	; 15
 172:	19 c0       	rjmp	.+50     	; 0x1a6 <main+0xcc>
		{ 
			Backward(100);       
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	0e 94 ed 00 	call	0x1da	; 0x1da <Backward>
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	93 ed       	ldi	r25, 0xD3	; 211
 17e:	a0 e3       	ldi	r26, 0x30	; 48
 180:	81 50       	subi	r24, 0x01	; 1
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	a0 40       	sbci	r26, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xa6>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xb0>
 18a:	00 00       	nop
			_delay_ms(1000); 
			Left(100);          
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Left>
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	99 e6       	ldi	r25, 0x69	; 105
 196:	a8 e1       	ldi	r26, 0x18	; 24
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0xbe>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xc8>
 1a2:	00 00       	nop
 1a4:	af cf       	rjmp	.-162    	; 0x104 <main+0x2a>
			_delay_ms(500); 
		}

		else
		{
			if (count == 0) 
 1a6:	20 97       	sbiw	r28, 0x00	; 0
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <main+0xd6>
			{
				Stop();
 1aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Stop>
 1ae:	aa cf       	rjmp	.-172    	; 0x104 <main+0x2a>
			}

			else
			{
				Forward(50);
 1b0:	82 e3       	ldi	r24, 0x32	; 50
 1b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <Forward>
 1b6:	a4 cf       	rjmp	.-184    	; 0x100 <main+0x26>

000001b8 <Start>:
#include "Global.h"

void Start()
{
	PORTB = 0b10000000; // Turn on the left motor
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000001; // Turn on the right motor
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8b b9       	out	0x0b, r24	; 11
}
 1c0:	08 95       	ret

000001c2 <Stop>:

void Stop()
{
	PORTB = 0b10001100; // Stop left motor
 1c2:	8c e8       	ldi	r24, 0x8C	; 140
 1c4:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000111; // Stop right motor
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	8b b9       	out	0x0b, r24	; 11
}
 1ca:	08 95       	ret

000001cc <Forward>:

void Forward(uint8_t speed) //Function for moving forward. Speed : 0 ~ 255
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3); // Motor Direction
 1cc:	2a 9a       	sbi	0x05, 2	; 5
 1ce:	2b 98       	cbi	0x05, 3	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2); // Motor Direction
 1d0:	59 9a       	sbi	0x0b, 1	; 11
 1d2:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 1d4:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 1d6:	88 bd       	out	0x28, r24	; 40
}
 1d8:	08 95       	ret

000001da <Backward>:

void Backward(uint8_t speed) //Function for moving backward. Speed : 0 ~ 255
{
	PORTB &= ~(1 << PB2); PORTB |= (1 << PB3); // Motor Direction
 1da:	2a 98       	cbi	0x05, 2	; 5
 1dc:	2b 9a       	sbi	0x05, 3	; 5
	PORTD &= ~(1 << PD1); PORTD |= (1 << PD2); // Motor Direction
 1de:	59 98       	cbi	0x0b, 1	; 11
 1e0:	5a 9a       	sbi	0x0b, 2	; 11
	OCR0A = speed;
 1e2:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 1e4:	88 bd       	out	0x28, r24	; 40
}
 1e6:	08 95       	ret

000001e8 <Left>:

void Left(uint8_t speed)
{
	PORTB &= ~(1 << PB2); PORTB |= (1 << PB3);
 1e8:	2a 98       	cbi	0x05, 2	; 5
 1ea:	2b 9a       	sbi	0x05, 3	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2);
 1ec:	59 9a       	sbi	0x0b, 1	; 11
 1ee:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 1f0:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;	
 1f2:	88 bd       	out	0x28, r24	; 40
}
 1f4:	08 95       	ret

000001f6 <Right>:

void Right(uint8_t speed)
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3);
 1f6:	2a 9a       	sbi	0x05, 2	; 5
 1f8:	2b 98       	cbi	0x05, 3	; 5
	PORTD &= ~(1 << PD1); PORTD |= (1 << PD2);
 1fa:	59 98       	cbi	0x0b, 1	; 11
 1fc:	5a 9a       	sbi	0x0b, 2	; 11
	OCR0A = speed;
 1fe:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 200:	88 bd       	out	0x28, r24	; 40
}
 202:	08 95       	ret

00000204 <frequency_return>:
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 204:	9c 01       	movw	r18, r24
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	60 e4       	ldi	r22, 0x40	; 64
 20c:	72 e4       	ldi	r23, 0x42	; 66
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divmodsi4>
	return_fre = set_period /period_1;
 216:	c9 01       	movw	r24, r18
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__divmodhi4>

	return return_fre;
}
 220:	cb 01       	movw	r24, r22
 222:	08 95       	ret

00000224 <tone>:

void tone(uint8_t scale, uint16_t delay) 
{
 224:	cf 92       	push	r12
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
 234:	c8 2f       	mov	r28, r24
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	cc 0f       	add	r28, r28
 23a:	dd 1f       	adc	r29, r29
 23c:	c0 50       	subi	r28, 0x00	; 0
 23e:	df 4f       	sbci	r29, 0xFF	; 255
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 240:	28 81       	ld	r18, Y
 242:	39 81       	ldd	r19, Y+1	; 0x01
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	c8 2e       	mov	r12, r24
 24c:	82 e4       	ldi	r24, 0x42	; 66
 24e:	d8 2e       	mov	r13, r24
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	e8 2e       	mov	r14, r24
 254:	f1 2c       	mov	r15, r1
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divmodsi4>
	return_fre = set_period /period_1;
 25e:	c9 01       	movw	r24, r18
 260:	02 e0       	ldi	r16, 0x02	; 2
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	b8 01       	movw	r22, r16
 266:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__divmodhi4>
	return return_fre;
}

void tone(uint8_t scale, uint16_t delay) 
{
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
 26a:	70 93 87 00 	sts	0x0087, r23
 26e:	60 93 86 00 	sts	0x0086, r22
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 272:	28 81       	ld	r18, Y
 274:	39 81       	ldd	r19, Y+1	; 0x01
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divmodsi4>
	return_fre = set_period /period_1;
 282:	c9 01       	movw	r24, r18
 284:	b8 01       	movw	r22, r16
 286:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__divmodhi4>
}

void tone(uint8_t scale, uint16_t delay) 
{
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
	OC1A_WIDTH = frequency_return(tone_array[scale])/20; //width
 28a:	cb 01       	movw	r24, r22
 28c:	64 e1       	ldi	r22, 0x14	; 20
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	0e 94 57 01 	call	0x2ae	; 0x2ae <__udivmodhi4>
 294:	70 93 89 00 	sts	0x0089, r23
 298:	60 93 88 00 	sts	0x0088, r22
	// _delay_ms(delay);
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	08 95       	ret

000002ae <__udivmodhi4>:
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	51 e1       	ldi	r21, 0x11	; 17
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__udivmodhi4_ep>

000002b6 <__udivmodhi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	a6 17       	cp	r26, r22
 2bc:	b7 07       	cpc	r27, r23
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <__udivmodhi4_ep>
 2c0:	a6 1b       	sub	r26, r22
 2c2:	b7 0b       	sbc	r27, r23

000002c4 <__udivmodhi4_ep>:
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	5a 95       	dec	r21
 2ca:	a9 f7       	brne	.-22     	; 0x2b6 <__udivmodhi4_loop>
 2cc:	80 95       	com	r24
 2ce:	90 95       	com	r25
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	08 95       	ret

000002d6 <__divmodhi4>:
 2d6:	97 fb       	bst	r25, 7
 2d8:	09 2e       	mov	r0, r25
 2da:	07 26       	eor	r0, r23
 2dc:	0a d0       	rcall	.+20     	; 0x2f2 <__divmodhi4_neg1>
 2de:	77 fd       	sbrc	r23, 7
 2e0:	04 d0       	rcall	.+8      	; 0x2ea <__divmodhi4_neg2>
 2e2:	e5 df       	rcall	.-54     	; 0x2ae <__udivmodhi4>
 2e4:	06 d0       	rcall	.+12     	; 0x2f2 <__divmodhi4_neg1>
 2e6:	00 20       	and	r0, r0
 2e8:	1a f4       	brpl	.+6      	; 0x2f0 <__divmodhi4_exit>

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__divmodhi4_neg1>:
 2f2:	f6 f7       	brtc	.-4      	; 0x2f0 <__divmodhi4_exit>
 2f4:	90 95       	com	r25
 2f6:	81 95       	neg	r24
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	08 95       	ret

000002fc <__divmodsi4>:
 2fc:	97 fb       	bst	r25, 7
 2fe:	09 2e       	mov	r0, r25
 300:	05 26       	eor	r0, r21
 302:	0e d0       	rcall	.+28     	; 0x320 <__divmodsi4_neg1>
 304:	57 fd       	sbrc	r21, 7
 306:	04 d0       	rcall	.+8      	; 0x310 <__divmodsi4_neg2>
 308:	14 d0       	rcall	.+40     	; 0x332 <__udivmodsi4>
 30a:	0a d0       	rcall	.+20     	; 0x320 <__divmodsi4_neg1>
 30c:	00 1c       	adc	r0, r0
 30e:	38 f4       	brcc	.+14     	; 0x31e <__divmodsi4_exit>

00000310 <__divmodsi4_neg2>:
 310:	50 95       	com	r21
 312:	40 95       	com	r20
 314:	30 95       	com	r19
 316:	21 95       	neg	r18
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	4f 4f       	sbci	r20, 0xFF	; 255
 31c:	5f 4f       	sbci	r21, 0xFF	; 255

0000031e <__divmodsi4_exit>:
 31e:	08 95       	ret

00000320 <__divmodsi4_neg1>:
 320:	f6 f7       	brtc	.-4      	; 0x31e <__divmodsi4_exit>
 322:	90 95       	com	r25
 324:	80 95       	com	r24
 326:	70 95       	com	r23
 328:	61 95       	neg	r22
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	8f 4f       	sbci	r24, 0xFF	; 255
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__udivmodsi4>:
 332:	a1 e2       	ldi	r26, 0x21	; 33
 334:	1a 2e       	mov	r1, r26
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	fd 01       	movw	r30, r26
 33c:	0d c0       	rjmp	.+26     	; 0x358 <__udivmodsi4_ep>

0000033e <__udivmodsi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	ee 1f       	adc	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	a2 17       	cp	r26, r18
 348:	b3 07       	cpc	r27, r19
 34a:	e4 07       	cpc	r30, r20
 34c:	f5 07       	cpc	r31, r21
 34e:	20 f0       	brcs	.+8      	; 0x358 <__udivmodsi4_ep>
 350:	a2 1b       	sub	r26, r18
 352:	b3 0b       	sbc	r27, r19
 354:	e4 0b       	sbc	r30, r20
 356:	f5 0b       	sbc	r31, r21

00000358 <__udivmodsi4_ep>:
 358:	66 1f       	adc	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	1a 94       	dec	r1
 362:	69 f7       	brne	.-38     	; 0x33e <__udivmodsi4_loop>
 364:	60 95       	com	r22
 366:	70 95       	com	r23
 368:	80 95       	com	r24
 36a:	90 95       	com	r25
 36c:	9b 01       	movw	r18, r22
 36e:	ac 01       	movw	r20, r24
 370:	bd 01       	movw	r22, r26
 372:	cf 01       	movw	r24, r30
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
