
Basic_Mobile_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000378  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ab  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054c  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b0  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017e  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021c  00000000  00000000  00001bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000098  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e7       	ldi	r30, 0x78	; 120
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 31       	cpi	r26, 0x12	; 18
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:
#include "Global.h"
#include "Sound.h"


int main()
{
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
	DDRB = 0b10001100; // PB7, PB3, PB2, PB5 : OUTPUT
  e0:	8c e8       	ldi	r24, 0x8C	; 140
  e2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00000111; // PD2, PD1, PD0 	 : OUTPUT
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0x00;       // PF0, PF1	         : Interrupt (switches)
  e8:	10 ba       	out	0x10, r1	; 16

	TCCR0A = 0b11110001; // PWM, Phase and Frequency Correct
  ea:	81 ef       	ldi	r24, 0xF1	; 241
  ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000100; // prescaler 256
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	85 bd       	out	0x25, r24	; 37

	int count = 0;

	Start();	
  f2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Start>
	DDRF = 0x00;       // PF0, PF1	         : Interrupt (switches)

	TCCR0A = 0b11110001; // PWM, Phase and Frequency Correct
	TCCR0B = 0b00000100; // prescaler 256

	int count = 0;
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0

	Start();	

	while(1)
	{	
		PINF = 0b00000011;
  fa:	13 e0       	ldi	r17, 0x03	; 3
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x28>

		if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000000)) 
		{
			if (count == 0)
			{
				count++;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
 100:	d0 e0       	ldi	r29, 0x00	; 0

	Start();	

	while(1)
	{	
		PINF = 0b00000011;
 102:	1f b9       	out	0x0f, r17	; 15

		if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000000)) 
 104:	78 9b       	sbis	0x0f, 0	; 15
 106:	1d c0       	rjmp	.+58     	; 0x142 <main+0x68>
 108:	79 9b       	sbis	0x0f, 1	; 15
 10a:	1b c0       	rjmp	.+54     	; 0x142 <main+0x68>
		{
			if (count == 0)
 10c:	20 97       	sbiw	r28, 0x00	; 0
 10e:	b9 f3       	breq	.-18     	; 0xfe <main+0x24>
				count++;
			}
			
			else
			{
				Backward(100);
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	93 ed       	ldi	r25, 0xD3	; 211
 11a:	a0 e3       	ldi	r26, 0x30	; 48
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	a0 40       	sbci	r26, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x42>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x4c>
 126:	00 00       	nop
				_delay_ms(1000); 
	  		    Right(100);   
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Right>
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	93 ed       	ldi	r25, 0xD3	; 211
 132:	a0 e3       	ldi	r26, 0x30	; 48
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	a0 40       	sbci	r26, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x5a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x64>
 13e:	00 00       	nop
 140:	de cf       	rjmp	.-68     	; 0xfe <main+0x24>
				_delay_ms(1000); 
			}
		}

		else if (((~PINF & 0b00000001) == 0b00000001) && ((~PINF & 0b00000010) == 0b00000000)) 
 142:	78 99       	sbic	0x0f, 0	; 15
 144:	12 c0       	rjmp	.+36     	; 0x16a <main+0x90>
 146:	79 9b       	sbis	0x0f, 1	; 15
 148:	10 c0       	rjmp	.+32     	; 0x16a <main+0x90>
		{ 
		 	Backward(100);
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Backward>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	93 ed       	ldi	r25, 0xD3	; 211
 154:	a0 e3       	ldi	r26, 0x30	; 48
 156:	81 50       	subi	r24, 0x01	; 1
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	a0 40       	sbci	r26, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x7c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x86>
 160:	00 00       	nop
			_delay_ms(1000); 
  		    Right(100);   
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Right>
 168:	13 c0       	rjmp	.+38     	; 0x190 <main+0xb6>
			_delay_ms(500); 
		}  
		
		else if (((~PINF & 0b00000001) == 0b00000000) && ((~PINF & 0b00000010) == 0b00000010)) 
 16a:	78 9b       	sbis	0x0f, 0	; 15
 16c:	1b c0       	rjmp	.+54     	; 0x1a4 <main+0xca>
 16e:	79 99       	sbic	0x0f, 1	; 15
 170:	19 c0       	rjmp	.+50     	; 0x1a4 <main+0xca>
		{ 
			Backward(100);       
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Backward>
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	93 ed       	ldi	r25, 0xD3	; 211
 17c:	a0 e3       	ldi	r26, 0x30	; 48
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	a0 40       	sbci	r26, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xa4>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xae>
 188:	00 00       	nop
			_delay_ms(1000); 
			Left(100);          
 18a:	84 e6       	ldi	r24, 0x64	; 100
 18c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Left>
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	99 e6       	ldi	r25, 0x69	; 105
 194:	a8 e1       	ldi	r26, 0x18	; 24
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	a0 40       	sbci	r26, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xbc>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xc6>
 1a0:	00 00       	nop
 1a2:	af cf       	rjmp	.-162    	; 0x102 <main+0x28>
			_delay_ms(500); 
		}

		else
		{
			if (count == 0) 
 1a4:	20 97       	sbiw	r28, 0x00	; 0
 1a6:	19 f4       	brne	.+6      	; 0x1ae <main+0xd4>
			{
				Stop();
 1a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Stop>
 1ac:	aa cf       	rjmp	.-172    	; 0x102 <main+0x28>
			}

			else
			{
				Forward(50);
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Forward>
 1b4:	a4 cf       	rjmp	.-184    	; 0xfe <main+0x24>

000001b6 <Start>:
#include "Global.h"

void Start()
{
	PORTB = 0b10000000; // Turn on the left motor
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000001; // Turn on the right motor
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8b b9       	out	0x0b, r24	; 11
}
 1be:	08 95       	ret

000001c0 <Stop>:

void Stop()
{
	PORTB = 0b10001100; // Stop left motor
 1c0:	8c e8       	ldi	r24, 0x8C	; 140
 1c2:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000111; // Stop right motor
 1c4:	87 e0       	ldi	r24, 0x07	; 7
 1c6:	8b b9       	out	0x0b, r24	; 11
}
 1c8:	08 95       	ret

000001ca <Forward>:

void Forward(uint8_t speed) //Function for moving forward. Speed : 0 ~ 255
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3); // Motor Direction
 1ca:	2a 9a       	sbi	0x05, 2	; 5
 1cc:	2b 98       	cbi	0x05, 3	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2); // Motor Direction
 1ce:	59 9a       	sbi	0x0b, 1	; 11
 1d0:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 1d2:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 1d4:	88 bd       	out	0x28, r24	; 40
}
 1d6:	08 95       	ret

000001d8 <Backward>:

void Backward(uint8_t speed) //Function for moving backward. Speed : 0 ~ 255
{
	PORTB &= ~(1 << PB2); PORTB |= (1 << PB3); // Motor Direction
 1d8:	2a 98       	cbi	0x05, 2	; 5
 1da:	2b 9a       	sbi	0x05, 3	; 5
	PORTD &= ~(1 << PD1); PORTD |= (1 << PD2); // Motor Direction
 1dc:	59 98       	cbi	0x0b, 1	; 11
 1de:	5a 9a       	sbi	0x0b, 2	; 11
	OCR0A = speed;
 1e0:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 1e2:	88 bd       	out	0x28, r24	; 40
}
 1e4:	08 95       	ret

000001e6 <Left>:

void Left(uint8_t speed)
{
	PORTB &= ~(1 << PB2); PORTB |= (1 << PB3);
 1e6:	2a 98       	cbi	0x05, 2	; 5
 1e8:	2b 9a       	sbi	0x05, 3	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2);
 1ea:	59 9a       	sbi	0x0b, 1	; 11
 1ec:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 1ee:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;	
 1f0:	88 bd       	out	0x28, r24	; 40
}
 1f2:	08 95       	ret

000001f4 <Right>:

void Right(uint8_t speed)
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3);
 1f4:	2a 9a       	sbi	0x05, 2	; 5
 1f6:	2b 98       	cbi	0x05, 3	; 5
	PORTD &= ~(1 << PD1); PORTD |= (1 << PD2);
 1f8:	59 98       	cbi	0x0b, 1	; 11
 1fa:	5a 9a       	sbi	0x0b, 2	; 11
	OCR0A = speed;
 1fc:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 1fe:	88 bd       	out	0x28, r24	; 40
}
 200:	08 95       	ret

00000202 <frequency_return>:
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 202:	9c 01       	movw	r18, r24
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	60 e4       	ldi	r22, 0x40	; 64
 20a:	72 e4       	ldi	r23, 0x42	; 66
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__divmodsi4>
	return_fre = set_period /period_1;
 214:	c9 01       	movw	r24, r18
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>

	return return_fre;
}
 21e:	cb 01       	movw	r24, r22
 220:	08 95       	ret

00000222 <tone>:

void tone(uint8_t scale, uint16_t delay) 
{
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
 232:	c8 2f       	mov	r28, r24
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	cc 0f       	add	r28, r28
 238:	dd 1f       	adc	r29, r29
 23a:	c0 50       	subi	r28, 0x00	; 0
 23c:	df 4f       	sbci	r29, 0xFF	; 255
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 23e:	28 81       	ld	r18, Y
 240:	39 81       	ldd	r19, Y+1	; 0x01
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	c8 2e       	mov	r12, r24
 24a:	82 e4       	ldi	r24, 0x42	; 66
 24c:	d8 2e       	mov	r13, r24
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	e8 2e       	mov	r14, r24
 252:	f1 2c       	mov	r15, r1
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__divmodsi4>
	return_fre = set_period /period_1;
 25c:	c9 01       	movw	r24, r18
 25e:	02 e0       	ldi	r16, 0x02	; 2
 260:	10 e0       	ldi	r17, 0x00	; 0
 262:	b8 01       	movw	r22, r16
 264:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
	return return_fre;
}

void tone(uint8_t scale, uint16_t delay) 
{
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
 268:	70 93 87 00 	sts	0x0087, r23
 26c:	60 93 86 00 	sts	0x0086, r22
{
	int8_t period_1 = 2; // period 2us
	int set_period = 0;
	int16_t return_fre = 0;

	set_period = 1000000 / fre;
 270:	28 81       	ld	r18, Y
 272:	39 81       	ldd	r19, Y+1	; 0x01
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__divmodsi4>
	return_fre = set_period /period_1;
 280:	c9 01       	movw	r24, r18
 282:	b8 01       	movw	r22, r16
 284:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__divmodhi4>
}

void tone(uint8_t scale, uint16_t delay) 
{
	OC1_PERIOD = frequency_return(tone_array[scale]); //period 
	OC1A_WIDTH = frequency_return(tone_array[scale])/20; //width
 288:	cb 01       	movw	r24, r22
 28a:	64 e1       	ldi	r22, 0x14	; 20
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	0e 94 56 01 	call	0x2ac	; 0x2ac <__udivmodhi4>
 292:	70 93 89 00 	sts	0x0089, r23
 296:	60 93 88 00 	sts	0x0088, r22
	// _delay_ms(delay);
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	08 95       	ret

000002ac <__udivmodhi4>:
 2ac:	aa 1b       	sub	r26, r26
 2ae:	bb 1b       	sub	r27, r27
 2b0:	51 e1       	ldi	r21, 0x11	; 17
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <__udivmodhi4_ep>

000002b4 <__udivmodhi4_loop>:
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	a6 17       	cp	r26, r22
 2ba:	b7 07       	cpc	r27, r23
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <__udivmodhi4_ep>
 2be:	a6 1b       	sub	r26, r22
 2c0:	b7 0b       	sbc	r27, r23

000002c2 <__udivmodhi4_ep>:
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	5a 95       	dec	r21
 2c8:	a9 f7       	brne	.-22     	; 0x2b4 <__udivmodhi4_loop>
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	bc 01       	movw	r22, r24
 2d0:	cd 01       	movw	r24, r26
 2d2:	08 95       	ret

000002d4 <__divmodhi4>:
 2d4:	97 fb       	bst	r25, 7
 2d6:	09 2e       	mov	r0, r25
 2d8:	07 26       	eor	r0, r23
 2da:	0a d0       	rcall	.+20     	; 0x2f0 <__divmodhi4_neg1>
 2dc:	77 fd       	sbrc	r23, 7
 2de:	04 d0       	rcall	.+8      	; 0x2e8 <__divmodhi4_neg2>
 2e0:	e5 df       	rcall	.-54     	; 0x2ac <__udivmodhi4>
 2e2:	06 d0       	rcall	.+12     	; 0x2f0 <__divmodhi4_neg1>
 2e4:	00 20       	and	r0, r0
 2e6:	1a f4       	brpl	.+6      	; 0x2ee <__divmodhi4_exit>

000002e8 <__divmodhi4_neg2>:
 2e8:	70 95       	com	r23
 2ea:	61 95       	neg	r22
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255

000002ee <__divmodhi4_exit>:
 2ee:	08 95       	ret

000002f0 <__divmodhi4_neg1>:
 2f0:	f6 f7       	brtc	.-4      	; 0x2ee <__divmodhi4_exit>
 2f2:	90 95       	com	r25
 2f4:	81 95       	neg	r24
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__divmodsi4>:
 2fa:	97 fb       	bst	r25, 7
 2fc:	09 2e       	mov	r0, r25
 2fe:	05 26       	eor	r0, r21
 300:	0e d0       	rcall	.+28     	; 0x31e <__divmodsi4_neg1>
 302:	57 fd       	sbrc	r21, 7
 304:	04 d0       	rcall	.+8      	; 0x30e <__divmodsi4_neg2>
 306:	14 d0       	rcall	.+40     	; 0x330 <__udivmodsi4>
 308:	0a d0       	rcall	.+20     	; 0x31e <__divmodsi4_neg1>
 30a:	00 1c       	adc	r0, r0
 30c:	38 f4       	brcc	.+14     	; 0x31c <__divmodsi4_exit>

0000030e <__divmodsi4_neg2>:
 30e:	50 95       	com	r21
 310:	40 95       	com	r20
 312:	30 95       	com	r19
 314:	21 95       	neg	r18
 316:	3f 4f       	sbci	r19, 0xFF	; 255
 318:	4f 4f       	sbci	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255

0000031c <__divmodsi4_exit>:
 31c:	08 95       	ret

0000031e <__divmodsi4_neg1>:
 31e:	f6 f7       	brtc	.-4      	; 0x31c <__divmodsi4_exit>
 320:	90 95       	com	r25
 322:	80 95       	com	r24
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255
 32a:	8f 4f       	sbci	r24, 0xFF	; 255
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	08 95       	ret

00000330 <__udivmodsi4>:
 330:	a1 e2       	ldi	r26, 0x21	; 33
 332:	1a 2e       	mov	r1, r26
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	fd 01       	movw	r30, r26
 33a:	0d c0       	rjmp	.+26     	; 0x356 <__udivmodsi4_ep>

0000033c <__udivmodsi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	ee 1f       	adc	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	a2 17       	cp	r26, r18
 346:	b3 07       	cpc	r27, r19
 348:	e4 07       	cpc	r30, r20
 34a:	f5 07       	cpc	r31, r21
 34c:	20 f0       	brcs	.+8      	; 0x356 <__udivmodsi4_ep>
 34e:	a2 1b       	sub	r26, r18
 350:	b3 0b       	sbc	r27, r19
 352:	e4 0b       	sbc	r30, r20
 354:	f5 0b       	sbc	r31, r21

00000356 <__udivmodsi4_ep>:
 356:	66 1f       	adc	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	88 1f       	adc	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	1a 94       	dec	r1
 360:	69 f7       	brne	.-38     	; 0x33c <__udivmodsi4_loop>
 362:	60 95       	com	r22
 364:	70 95       	com	r23
 366:	80 95       	com	r24
 368:	90 95       	com	r25
 36a:	9b 01       	movw	r18, r22
 36c:	ac 01       	movw	r20, r24
 36e:	bd 01       	movw	r22, r26
 370:	cf 01       	movw	r24, r30
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
