
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000002f2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000096  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000495  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d3  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049c  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012a  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000056  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a3 30       	cpi	r26, 0x03	; 3
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  cc:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
#include "Global.h"

int main() {

	DDRB = 0b10101100; 	/*  PB7 --> Left motor enable bit
  d4:	8c ea       	ldi	r24, 0xAC	; 172
  d6:	84 b9       	out	0x04, r24	; 4
							PB3 --> Left motor forward bit
							PB2 --> Left motor backward bit

							PB5 --> Buzzer enable bit */

	DDRD = 0b01000111;	/* 	PD0 --> Right motor enable bit
  d8:	87 e4       	ldi	r24, 0x47	; 71
  da:	8a b9       	out	0x0a, r24	; 10
							PD2 --> Right motor forward bit
							PD1 --> Right motor backward bit

							PD6 --> LED bit */

	DDRF = 0b00000000;	/*  PF1 --> Left button
  dc:	10 ba       	out	0x10, r1	; 16
							PF0 --> Right button */
	PORTF = 0b00000011;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	81 bb       	out	0x11, r24	; 17

	TCCR0A = 0b11110001;    // PWM, Phase and Frequency Correct
  e2:	81 ef       	ldi	r24, 0xF1	; 241
  e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000100;    // Prescaler 256
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	85 bd       	out	0x25, r24	; 37

	TCCR3A = 0b00000000;    // Normal
  ea:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0b00000101;    // Prescaler 1024
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	80 93 91 00 	sts	0x0091, r24

	TIMSK3 = 0b00000001;	// Time interrupt enable
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 71 00 	sts	0x0071, r24
	TCNT3 = 0xffff - 60535; // Every 0.1 second
  fa:	88 e8       	ldi	r24, 0x88	; 136
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	90 93 95 00 	sts	0x0095, r25
 102:	80 93 94 00 	sts	0x0094, r24
	
	blink_led = 0;
 106:	10 92 02 01 	sts	0x0102, r1
	EN = 0;
 10a:	10 92 01 01 	sts	0x0101, r1
 10e:	10 92 00 01 	sts	0x0100, r1
 112:	15 c0       	rjmp	.+42     	; 0x13e <main+0x6a>
	
	while(1) {
		while (EN == 0) {
			if (PINF & (1 << 1)) {
 114:	79 9b       	sbis	0x0f, 1	; 15
 116:	03 c0       	rjmp	.+6      	; 0x11e <main+0x4a>
				if (PINF & (1 << 0)) {
 118:	78 9b       	sbis	0x0f, 0	; 15
 11a:	03 c0       	rjmp	.+6      	; 0x122 <main+0x4e>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x4e>
				else {
					Stop();
				}
			}
			else {
				if (PINF & (1 << 0)) {
 11e:	78 9b       	sbis	0x0f, 0	; 15
 120:	03 c0       	rjmp	.+6      	; 0x128 <main+0x54>
					Stop();
 122:	0e 94 1c 01 	call	0x238	; 0x238 <Stop>
 126:	0b c0       	rjmp	.+22     	; 0x13e <main+0x6a>
				}
				else {
					Start();
 128:	0e 94 17 01 	call	0x22e	; 0x22e <Start>
					EN++;
 12c:	80 91 00 01 	lds	r24, 0x0100
 130:	90 91 01 01 	lds	r25, 0x0101
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	90 93 01 01 	sts	0x0101, r25
 13a:	80 93 00 01 	sts	0x0100, r24
	
	blink_led = 0;
	EN = 0;
	
	while(1) {
		while (EN == 0) {
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	29 f3       	breq	.-54     	; 0x114 <main+0x40>
 14a:	69 c0       	rjmp	.+210    	; 0x21e <main+0x14a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	91 ee       	ldi	r25, 0xE1	; 225
 150:	a4 e0       	ldi	r26, 0x04	; 4
 152:	81 50       	subi	r24, 0x01	; 1
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	a0 40       	sbci	r26, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x7e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x88>
 15c:	00 00       	nop
			}
		}

		while (EN != 0) {
			_delay_ms(100);
			if (PINF & (1 << 1)) {
 15e:	79 9b       	sbis	0x0f, 1	; 15
 160:	1f c0       	rjmp	.+62     	; 0x1a0 <main+0xcc>
				if (PINF & (1 << 0)) {
 162:	78 9b       	sbis	0x0f, 0	; 15
 164:	04 c0       	rjmp	.+8      	; 0x16e <main+0x9a>
					Forward(50);
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	0e 94 21 01 	call	0x242	; 0x242 <Forward>
 16c:	58 c0       	rjmp	.+176    	; 0x21e <main+0x14a>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	91 ee       	ldi	r25, 0xE1	; 225
 172:	a4 e0       	ldi	r26, 0x04	; 4
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	a0 40       	sbci	r26, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xa0>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xaa>
 17e:	00 00       	nop
				}
				else {
					_delay_ms(100);
					Backward(100);       
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	0e 94 28 01 	call	0x250	; 0x250 <Backward>
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	93 ed       	ldi	r25, 0xD3	; 211
 18a:	a0 e3       	ldi	r26, 0x30	; 48
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	a0 40       	sbci	r26, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xb8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xc2>
 196:	00 00       	nop
					_delay_ms(1000); 
					Left(100);          
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	0e 94 2f 01 	call	0x25e	; 0x25e <Left>
 19e:	1a c0       	rjmp	.+52     	; 0x1d4 <main+0x100>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	91 ee       	ldi	r25, 0xE1	; 225
 1a4:	a4 e0       	ldi	r26, 0x04	; 4
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	a0 40       	sbci	r26, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xd2>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xdc>
 1b0:	00 00       	nop
					blink_led++;
				}
			}
			else {
				_delay_ms(100);
				if (PINF & (1 << 0)) {
 1b2:	78 9b       	sbis	0x0f, 0	; 15
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <main+0x110>
					Backward(100);       
 1b6:	84 e6       	ldi	r24, 0x64	; 100
 1b8:	0e 94 28 01 	call	0x250	; 0x250 <Backward>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	93 ed       	ldi	r25, 0xD3	; 211
 1c0:	a0 e3       	ldi	r26, 0x30	; 48
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	a0 40       	sbci	r26, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xee>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xf8>
 1cc:	00 00       	nop
					_delay_ms(1000); 
					Right(100);          
 1ce:	84 e6       	ldi	r24, 0x64	; 100
 1d0:	0e 94 36 01 	call	0x26c	; 0x26c <Right>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	99 e6       	ldi	r25, 0x69	; 105
 1d8:	a8 e1       	ldi	r26, 0x18	; 24
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	a0 40       	sbci	r26, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x106>
 1e2:	16 c0       	rjmp	.+44     	; 0x210 <main+0x13c>
					_delay_ms(500);  
					blink_led++;
				}
				else {
					Backward(100);       
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	0e 94 28 01 	call	0x250	; 0x250 <Backward>
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	93 ed       	ldi	r25, 0xD3	; 211
 1ee:	a0 e3       	ldi	r26, 0x30	; 48
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	a0 40       	sbci	r26, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x11c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x126>
 1fa:	00 00       	nop
					_delay_ms(1000); 
					Right(100);          
 1fc:	84 e6       	ldi	r24, 0x64	; 100
 1fe:	0e 94 36 01 	call	0x26c	; 0x26c <Right>
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	93 ed       	ldi	r25, 0xD3	; 211
 206:	a0 e3       	ldi	r26, 0x30	; 48
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	a0 40       	sbci	r26, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x134>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x13e>
 212:	00 00       	nop
					_delay_ms(1000);  
					blink_led++;
 214:	80 91 02 01 	lds	r24, 0x0102
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 02 01 	sts	0x0102, r24
					EN++;
				}
			}
		}

		while (EN != 0) {
 21e:	80 91 00 01 	lds	r24, 0x0100
 222:	90 91 01 01 	lds	r25, 0x0101
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	09 f0       	breq	.+2      	; 0x22c <main+0x158>
 22a:	90 cf       	rjmp	.-224    	; 0x14c <main+0x78>
 22c:	88 cf       	rjmp	.-240    	; 0x13e <main+0x6a>

0000022e <Start>:
#include "Global.h"

void Start()
{
	PORTB = 0b10000000; // Turn on the left motor.
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000001; // Turn on the right motor.
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	8b b9       	out	0x0b, r24	; 11
}
 236:	08 95       	ret

00000238 <Stop>:

void Stop()
{
	PORTB = 0b10001100; // Stop left motor.
 238:	8c e8       	ldi	r24, 0x8C	; 140
 23a:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000111; // Stop right motor.
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	8b b9       	out	0x0b, r24	; 11
}
 240:	08 95       	ret

00000242 <Forward>:

void Forward(uint8_t speed) //Function for moving forward. Speed : 0 ~ 255.
{
	PORTB |= (1 << PB3); PORTB &= ~(1 << PB2); // Motor Direction.
 242:	2b 9a       	sbi	0x05, 3	; 5
 244:	2a 98       	cbi	0x05, 2	; 5
	PORTD |= (1 << PD2); PORTD &= ~(1 << PD1); // Motor Direction.
 246:	5a 9a       	sbi	0x0b, 2	; 11
 248:	59 98       	cbi	0x0b, 1	; 11
	OCR0A = speed;
 24a:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 24c:	88 bd       	out	0x28, r24	; 40
}
 24e:	08 95       	ret

00000250 <Backward>:

void Backward(uint8_t speed) //Function for moving backward. Speed : 0 ~ 255.
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3); // Motor Direction.
 250:	2a 9a       	sbi	0x05, 2	; 5
 252:	2b 98       	cbi	0x05, 3	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2); // Motor Direction.
 254:	59 9a       	sbi	0x0b, 1	; 11
 256:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 258:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 25a:	88 bd       	out	0x28, r24	; 40
}
 25c:	08 95       	ret

0000025e <Left>:

void Left(uint8_t speed) // Function for turning left. Speed : 0 ~ 255.
{
	PORTB |= (1 << PB3); PORTB &= ~(1 << PB2); // Motor Direction.
 25e:	2b 9a       	sbi	0x05, 3	; 5
 260:	2a 98       	cbi	0x05, 2	; 5
	PORTD |= (1 << PD1); PORTD &= ~(1 << PD2); // Motor Direction.
 262:	59 9a       	sbi	0x0b, 1	; 11
 264:	5a 98       	cbi	0x0b, 2	; 11
	OCR0A = speed;
 266:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;	
 268:	88 bd       	out	0x28, r24	; 40
}
 26a:	08 95       	ret

0000026c <Right>:

void Right(uint8_t speed) // Function for turninng right. Speed : 0 ~ 255.
{
	PORTB |= (1 << PB2); PORTB &= ~(1 << PB3); // Motor Direction.
 26c:	2a 9a       	sbi	0x05, 2	; 5
 26e:	2b 98       	cbi	0x05, 3	; 5
	PORTD |= (1 << PD2); PORTD &= ~(1 << PD1); // Motor Direction.
 270:	5a 9a       	sbi	0x0b, 2	; 11
 272:	59 98       	cbi	0x0b, 1	; 11
	OCR0A = speed;
 274:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed;
 276:	88 bd       	out	0x28, r24	; 40
}
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
