
Smaples.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000081  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000004c  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000142  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000076  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>

int main() {
	DDRB = 0b10001100;
  c4:	8c e8       	ldi	r24, 0x8C	; 140
  c6:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00000111;
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0x00; // 1 --> input_pullup. Now it is 0b00001111;
  cc:	10 ba       	out	0x10, r1	; 16

	while(1) {
			PORTF = 0x01;
  ce:	41 e0       	ldi	r20, 0x01	; 1

			if (PINF & (1 << 0)) { 
				PORTB = 0b10001000;
  d0:	38 e8       	ldi	r19, 0x88	; 136
			} // (1 << 0) means that it will check the 0th number of binarys
			
			else {
				PORTB = 0b10000100;
  d2:	24 e8       	ldi	r18, 0x84	; 132
			if (PINF & (1 << 1)) {
				PORTD = 0b00000101;
			} // Same in here
			
			else {
				PORTD = 0b00000011;
  d4:	93 e0       	ldi	r25, 0x03	; 3
			else {
				PORTB = 0b10000100;
			}
			
			if (PINF & (1 << 1)) {
				PORTD = 0b00000101;
  d6:	85 e0       	ldi	r24, 0x05	; 5
	DDRB = 0b10001100;
	DDRD = 0b00000111;
	DDRF = 0x00; // 1 --> input_pullup. Now it is 0b00001111;

	while(1) {
			PORTF = 0x01;
  d8:	41 bb       	out	0x11, r20	; 17

			if (PINF & (1 << 0)) { 
  da:	78 9b       	sbis	0x0f, 0	; 15
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x1e>
				PORTB = 0b10001000;
  de:	35 b9       	out	0x05, r19	; 5
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <main+0x20>
			} // (1 << 0) means that it will check the 0th number of binarys
			
			else {
				PORTB = 0b10000100;
  e2:	25 b9       	out	0x05, r18	; 5
			}
			
			if (PINF & (1 << 1)) {
  e4:	79 9b       	sbis	0x0f, 1	; 15
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x28>
				PORTD = 0b00000101;
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	f6 cf       	rjmp	.-20     	; 0xd8 <main+0x14>
			} // Same in here
			
			else {
				PORTD = 0b00000011;
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	f4 cf       	rjmp	.-24     	; 0xd8 <main+0x14>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
